{"version":3,"sources":["components/contexts/Connections.js","components/styled-components/index.js","classes/Http.js","components/Database.js","components/Start.js","components/Routes.js","components/App.js","index.js"],"names":["ConnectionsContext","createContext","ConnectionsContextProvider","children","useState","JSON","parse","localStorage","getItem","connections","setConnections","useEffect","setItem","stringify","Provider","value","ButtonOutline","styled","button","PrimaryTitle","h1","StyledContainer","div","Container","scroll","props","style","overflowX","Http","method","url","args","headers","standard","Accept","fetch","response","data","json","console","error","code","status","request","Database","useContext","name","useParams","activeTableParsed","find","connection","database","activeTable","setLoadingDatabase","tables","setTables","a","get","getDatabase","log","path","mdiDatabase","mdiLoading","spin","size","Start","classes","createUseStyles","start","styles","className","classnames","as","NavLink","to","Routes","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ebf7237.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const ConnectionsContext = createContext();\r\n\r\nexport function ConnectionsContextProvider({ children }) {\r\n    const [connections, setConnections] = useState(JSON.parse(localStorage.getItem('connections')) ?? []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('connections', JSON.stringify(connections));\r\n    }, [connections]);\r\n\r\n    return (\r\n        <ConnectionsContext.Provider value={{ connections, setConnections }}>\r\n            {children}\r\n        </ConnectionsContext.Provider>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\nconst ButtonOutline = styled.button`\r\n    border: 2px solid var(--color-primary);\r\n    transition: all 0.05s ease-in-out;\r\n    box-shadow: 0 0 5px 0 black;\r\n    color: var(--color-primary);\r\n    text-decoration: none;\r\n    display: inline-flex;\r\n    border-radius: 4px;\r\n    font-weight: bold;\r\n    user-select: none;\r\n    background: none;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    padding: 15px;\r\n    outline: 0;\r\n    &:focus, &:hover {\r\n        color: white;\r\n    }\r\n    &:focus {\r\n        border-color: white;\r\n    }\r\n    &:hover {\r\n        background-color: rgba(0, 0, 0, 0.35);\r\n    }\r\n`;\r\n\r\nconst PrimaryTitle = styled.h1`\r\n    color: var(--color-primary);\r\n    margin-bottom: 15px;\r\n    font-weight: bold;\r\n    display: flex;\r\n    font-size: 2rem;\r\n    & svg {\r\n        margin-right: 5px;\r\n        width: 2rem;\r\n    }\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n    flex-direction: column;\r\n    display: flex;\r\n    margin: 50px;\r\n    &.center-children {\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n`;\r\nconst Container = ({ children, scroll = false, ...props }) => (\r\n    <StyledContainer style={{ overflowX: scroll ? 'auto' : null }} {...props}>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport {\r\n    ButtonOutline,\r\n    PrimaryTitle,\r\n    Container,\r\n};\r\n","export default class Http {\r\n    static async request(method = 'get', url = '', args = null, headers = null) {\r\n        const standard = {\r\n            method: method,\r\n            headers: {\r\n                Accept: 'application/json',\r\n                ...headers,\r\n            },\r\n        };\r\n        const response = await fetch(url, { ...args, ...standard });\r\n        let data = [];\r\n        try {\r\n            data = await response.json();\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        return { data: data, code: response.status, response: response };\r\n    }\r\n\r\n    static async get(url, args, headers) {\r\n        return await Http.request('get', url, args, headers);\r\n    }\r\n\r\n    static async post(url, args, headers) {\r\n        return await Http.request('post', url, args, headers);\r\n    }\r\n\r\n    static async put(url, args, headers) {\r\n        return await Http.request('put', url, args, headers);\r\n    }\r\n\r\n    static async patch(url, args, headers) {\r\n        return await Http.request('patch', url, args, headers);\r\n    }\r\n\r\n    static async delete(url, args, headers) {\r\n        return await Http.request('delete', url, args, headers);\r\n    }\r\n}\r\n","import { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from './table';\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { Container, PrimaryTitle } from './styled-components';\r\nimport { ConnectionsContext } from './contexts';\r\nimport { useParams } from 'react-router-dom';\r\nimport { createUseStyles } from 'react-jss';\r\nimport { mdiDatabase, mdiLoading } from '@mdi/js';\r\nimport classnames from 'classnames';\r\nimport { Http } from '../classes';\r\nimport Icon from '@mdi/react';\r\n\r\nexport default function Database() {    \r\n    const { connections } = useContext(ConnectionsContext);\r\n    const { name } = useParams();\r\n\r\n    const activeTableParsed = connections.find(connection => connection?.database === name);\r\n\r\n    const [activeTable, setActiveTable] = useState(activeTableParsed?.activeTable);\r\n    const [loadingDatabase, setLoadingDatabase] = useState(true);\r\n    const [tables, setTables] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getDatabase() {\r\n            setLoadingDatabase(true);\r\n            const { code, data } = await Http.get('/databases/tph');\r\n            setLoadingDatabase(false);\r\n            setTables(data);\r\n        }\r\n        getDatabase();\r\n    }, []);\r\n\r\n    console.log(tables);\r\n    \r\n    const getTableData = () => tables.find(data => data.table === activeTable) ?? { columns: {}, rows: [] };\r\n\r\n    function renderTable() {\r\n        if (!tables.length || !activeTable) {\r\n            return null;\r\n        }\r\n\r\n        const table = getTableData();\r\n\r\n        let columns = [];\r\n        for (const property in table.columns) {\r\n            columns.push(property);\r\n        }\r\n\r\n        const rows = table.rows.map(row => {\r\n            let cells = [];\r\n            for (const property in row) {\r\n                cells.push(row[property]);\r\n            }\r\n            return (\r\n                <TableRow key={Math.random()}>\r\n                    {\r\n                        cells.map(cell => (\r\n                            <TableCell key={cell}>\r\n                                {cell}\r\n                            </TableCell>\r\n                        ))\r\n                    }\r\n                </TableRow>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <TableHead>\r\n                    {\r\n                        columns.map(column => (\r\n                            <TableHeader key={column}>\r\n                                {column}\r\n                            </TableHeader>\r\n                        ))\r\n                    }\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows}\r\n                </TableBody>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <PrimaryTitle>\r\n                <Icon path={mdiDatabase} />\r\n                <span>{name}</span>\r\n            </PrimaryTitle>\r\n            {\r\n                <Icon path={mdiLoading} spin={1} size={2} />\r\n            }\r\n        </Container>\r\n    );\r\n}\r\n","import React, { useState, useRef, useEffect, useContext } from 'react';\r\nimport { ButtonOutline, Container } from './styled-components';\r\nimport { ConnectionsContext } from './contexts';\r\nimport { createUseStyles } from 'react-jss';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\n\r\nexport default function Start() {\r\n    const styles = createUseStyles({\r\n        start: {\r\n\r\n        },  \r\n    });\r\n    const classes = styles();\r\n\r\n    const { connections } = useContext(ConnectionsContext);\r\n\r\n    // console.log(connections);\r\n\r\n    return (\r\n        <Container className={classnames(classes.start, 'center-children')}>\r\n            <ButtonOutline as={NavLink} to=\"/database/tph\">Test TPH db</ButtonOutline>\r\n        </Container>\r\n    );\r\n}\r\n","import { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Route, Switch } from 'react-router';\r\nimport Database from './Database';\r\nimport Start from './Start';\r\nimport React from 'react';\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                    <Route path=\"/database/:name?\" exact>\r\n                        <Database />\r\n                    </Route>\r\n                    <Route>\r\n                        <Start />\r\n                    </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n","import { ConnectionsContextProvider } from './contexts';\nimport React, { useState, useEffect } from 'react';\nimport Routes from './Routes';\n\nexport default function App() {\n    return (\n        <ConnectionsContextProvider>\n            <Routes />\n        </ConnectionsContextProvider>\n    );\n}\n","import App from './components/App';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\nimport './styles/app.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}